//------------------------------------------------
//--- 010 Editor v8.0.1 Binary Template
//
//      File: 
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

local uint i;

struct {
  char RES[4] <name="RES signature">;
  UINT FileCount;
} HEADER;

typedef struct {
  char Name[32]; 
  UINT FilePos;
  UINT FileSize;
} FILE_NAME <name=GetName>; 

string GetName(FILE_NAME &fn)
{
  return fn.Name;
};

typedef struct (uint size) {
  FILE_NAME array[size] <optimize=false>;
} FILE_Table;

FILE_Table FileList(HEADER.FileCount) <name="File Table">;

struct {
  for (i = 0; i < HEADER.FileCount; ++i)
  {
    struct {
      FSeek(FileList.array[i].FilePos);
      BYTE FileData[FileList.array[i].FileSize];
    } FILE;
  };
} FILES <name="Files">;